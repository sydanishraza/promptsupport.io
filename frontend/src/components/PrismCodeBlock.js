/**
 * PrismCodeBlock React Component
 * Wrapper component for rendering Prism.js highlighted code blocks
 * Works with HTML generated by V2CodeNormalizationSystem backend
 */

import React, { useEffect, useRef } from 'react';
import prismManager from '../utils/prismSetup';

const PrismCodeBlock = ({ 
  children, 
  className = '', 
  onHighlight = null 
}) => {
  const containerRef = useRef(null);

  useEffect(() => {
    if (containerRef.current) {
      // Highlight code blocks in this container
      prismManager.highlightAllUnder(containerRef.current);
      
      // Call optional callback
      if (onHighlight) {
        onHighlight();
      }
    }
  }, [children, onHighlight]);

  return (
    <div 
      ref={containerRef}
      className={`prism-container ${className}`}
      dangerouslySetInnerHTML={{ __html: children }}
    />
  );
};

/**
 * HTMLContent Component
 * Safely renders HTML content with Prism highlighting
 * Ideal for content from V2 Engine that contains code blocks
 */
const HTMLContent = ({ 
  html, 
  className = '', 
  onRender = null 
}) => {
  const contentRef = useRef(null);

  useEffect(() => {
    if (contentRef.current && html) {
      // Set the HTML content
      contentRef.current.innerHTML = html;
      
      // Highlight any code blocks
      prismManager.highlightAllUnder(contentRef.current);
      
      // Call optional callback
      if (onRender) {
        onRender(contentRef.current);
      }
    }
  }, [html, onRender]);

  return (
    <div 
      ref={contentRef}
      className={`html-content ${className}`}
    />
  );
};

/**
 * StaticCodeBlock Component  
 * For rendering individual code blocks with known language
 */
const StaticCodeBlock = ({ 
  code, 
  language = 'text',
  showLineNumbers = true,
  filename = null,
  caption = null,
  className = ''
}) => {
  const codeRef = useRef(null);

  useEffect(() => {
    if (codeRef.current) {
      prismManager.highlightElement(codeRef.current);
    }
  }, [code, language]);

  const languageClass = `language-${language}`;
  const preClass = showLineNumbers ? 'line-numbers' : '';

  return (
    <figure className={`code-block ${className}`} data-lang={language.toUpperCase()}>
      <div className="code-toolbar">
        <span className="code-lang">{language.toUpperCase()}</span>
      </div>
      <pre className={preClass} data-start="1">
        <code 
          ref={codeRef}
          className={languageClass}
        >
          {code}
        </code>
      </pre>
      {caption && (
        <figcaption className="code-caption">{caption}</figcaption>
      )}
    </figure>
  );
};

/**
 * CodeHighlighter Hook
 * Custom hook for manual highlighting control
 */
const useCodeHighlighter = () => {
  const highlightAll = () => {
    prismManager.highlightAll();
  };

  const highlightContainer = (container) => {
    if (container) {
      prismManager.highlightAllUnder(container);
    }
  };

  const highlightElement = (element) => {
    if (element) {
      prismManager.highlightElement(element);
    }
  };

  return {
    highlightAll,
    highlightContainer,
    highlightElement,
    reinitialize: prismManager.reinitialize.bind(prismManager)
  };
};

export default PrismCodeBlock;
export { HTMLContent, StaticCodeBlock, useCodeHighlighter };