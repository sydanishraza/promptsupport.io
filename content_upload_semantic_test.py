#!/usr/bin/env python3
"""
CONTENT UPLOAD SEMANTIC IMAGE PLACEMENT TEST
Testing semantic image placement through the /api/content/upload endpoint
"""

import requests
import json
import os
import time
from dotenv import load_dotenv

# Load environment variables
load_dotenv('/app/frontend/.env')

# Get backend URL from environment
BACKEND_URL = os.environ.get('REACT_APP_BACKEND_URL', 'https://happy-buck.preview.emergentagent.com') + '/api'

class ContentUploadSemanticTest:
    def __init__(self):
        self.base_url = BACKEND_URL
        print(f"üéØ CONTENT UPLOAD SEMANTIC IMAGE PLACEMENT TEST")
        print(f"Testing at: {self.base_url}")
        print("=" * 80)
        
    def test_content_upload_with_docx(self, docx_path):
        """Test semantic image placement through content upload endpoint"""
        print(f"üîç Testing content upload with: {os.path.basename(docx_path)}")
        
        try:
            if not os.path.exists(docx_path):
                print(f"‚ùå DOCX file not found: {docx_path}")
                return False
            
            file_size = os.path.getsize(docx_path)
            print(f"üìä File size: {file_size} bytes")
            
            # Upload through content/upload endpoint
            with open(docx_path, 'rb') as f:
                files = {
                    'file': (os.path.basename(docx_path), f, 'application/vnd.openxmlformats-officedocument.wordprocessingml.document')
                }
                
                form_data = {
                    'metadata': json.dumps({
                        "source": "semantic_image_placement_test",
                        "test_type": "content_upload_semantic_test",
                        "enable_semantic_placement": True,
                        "document_type": "docx_with_images"
                    })
                }
                
                print("üì§ Uploading DOCX through /api/content/upload...")
                
                start_time = time.time()
                response = requests.post(
                    f"{self.base_url}/content/upload",
                    files=files,
                    data=form_data,
                    timeout=180
                )
                upload_time = time.time() - start_time
                
                print(f"‚è±Ô∏è Upload time: {upload_time:.2f} seconds")
                print(f"üìä Status Code: {response.status_code}")
                
                if response.status_code != 200:
                    print(f"‚ùå Upload failed - status {response.status_code}")
                    print(f"Response: {response.text}")
                    return False
                
                data = response.json()
                
                # Get job information
                job_id = data.get('job_id')
                status = data.get('status')
                chunks_created = data.get('chunks_created', 0)
                
                print(f"üìä Upload Results:")
                print(f"  Job ID: {job_id}")
                print(f"  Status: {status}")
                print(f"  Chunks created: {chunks_created}")
                
                if not job_id:
                    print("‚ùå No job ID returned")
                    return False
                
                # Wait for processing to complete
                print("‚è≥ Waiting for processing to complete...")
                
                max_wait_time = 120  # 2 minutes
                wait_start = time.time()
                
                while time.time() - wait_start < max_wait_time:
                    time.sleep(5)
                    
                    try:
                        status_response = requests.get(f"{self.base_url}/jobs/{job_id}", timeout=15)
                        if status_response.status_code == 200:
                            status_data = status_response.json()
                            current_status = status_data.get('status')
                            
                            print(f"üìä Processing status: {current_status}")
                            
                            if current_status == 'completed':
                                print("‚úÖ Processing completed successfully")
                                
                                # Check for generated content
                                chunks_created = status_data.get('chunks_created', 0)
                                print(f"üìö Final chunks created: {chunks_created}")
                                
                                if chunks_created > 0:
                                    return True, job_id
                                else:
                                    print("‚ö†Ô∏è No chunks created")
                                    return False, job_id
                                    
                            elif current_status == 'failed':
                                print("‚ùå Processing failed")
                                return False, job_id
                        else:
                            print(f"‚ö†Ô∏è Could not check status - code {status_response.status_code}")
                            
                    except Exception as status_error:
                        print(f"‚ö†Ô∏è Status check error: {status_error}")
                
                print("‚ö†Ô∏è Processing timeout - may still be running")
                return False, job_id
                
        except Exception as e:
            print(f"‚ùå Content upload test failed - {str(e)}")
            return False, None
    
    def check_content_library_for_semantic_placement(self, job_id=None):
        """Check Content Library for articles with semantic image placement"""
        print(f"\nüîç CHECKING CONTENT LIBRARY FOR SEMANTIC PLACEMENT")
        
        try:
            # Get articles from Content Library
            response = requests.get(f"{self.base_url}/content-library", timeout=30)
            
            if response.status_code != 200:
                print(f"‚ùå Could not access Content Library - status {response.status_code}")
                return False
            
            data = response.json()
            articles = data.get('articles', [])
            
            if not articles:
                print("‚ùå No articles found in Content Library")
                return False
            
            print(f"üìö Found {len(articles)} total articles in Content Library")
            
            # Look for recent articles (last 10 minutes)
            current_time = time.time()
            recent_articles = []
            
            for article in articles:
                created_at = article.get('created_at', '')
                if created_at:
                    try:
                        from datetime import datetime
                        article_time = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
                        article_timestamp = article_time.timestamp()
                        
                        # Check if article was created in the last 10 minutes
                        if current_time - article_timestamp < 600:  # 10 minutes
                            recent_articles.append(article)
                    except:
                        pass
            
            if not recent_articles:
                print("‚ö†Ô∏è No recent articles found (last 10 minutes)")
                # Still check the most recent articles
                recent_articles = articles[:5]  # Check last 5 articles
                print(f"üìä Checking {len(recent_articles)} most recent articles instead")
            else:
                print(f"üìä Found {len(recent_articles)} recent articles")
            
            # Analyze articles for semantic image placement
            articles_with_images = 0
            total_images = 0
            semantic_placement_detected = False
            
            for i, article in enumerate(recent_articles):
                title = article.get('title', f'Article {i+1}')
                content = article.get('content', '')
                metadata = article.get('metadata', {})
                
                # Check for images in content
                import re
                image_urls = re.findall(r'/api/static/uploads/[^"\'>\s]+', content)
                figure_count = content.count('<figure')
                img_count = content.count('<img')
                
                # Check metadata for semantic processing indicators
                ai_processed = metadata.get('ai_processed', False)
                semantic_images = metadata.get('semantic_images_applied', 0)
                processing_phase = metadata.get('phase', '')
                
                if image_urls or figure_count > 0 or img_count > 0:
                    articles_with_images += 1
                    total_images += len(image_urls)
                
                if semantic_images > 0 or 'semantic' in processing_phase.lower():
                    semantic_placement_detected = True
                
                print(f"üìÑ Article {i+1}: {title[:50]}...")
                print(f"    Images found: {len(image_urls)}")
                print(f"    HTML figures: {figure_count}")
                print(f"    AI processed: {ai_processed}")
                print(f"    Semantic images applied: {semantic_images}")
                print(f"    Processing phase: {processing_phase}")
                
                if len(image_urls) > 0:
                    print(f"    Sample image URL: {image_urls[0]}")
            
            print(f"\nüìä CONTENT LIBRARY ANALYSIS:")
            print(f"  Articles with images: {articles_with_images}/{len(recent_articles)}")
            print(f"  Total images found: {total_images}")
            print(f"  Semantic placement detected: {semantic_placement_detected}")
            
            if articles_with_images > 0:
                print("‚úÖ IMAGES FOUND IN CONTENT LIBRARY")
                print("‚úÖ Semantic image placement system is processing images")
                
                if semantic_placement_detected:
                    print("‚úÖ SEMANTIC PLACEMENT METADATA DETECTED")
                    print("‚úÖ Articles show evidence of semantic processing")
                
                return True
            else:
                print("‚ö†Ô∏è NO IMAGES FOUND IN RECENT ARTICLES")
                print("  This may indicate:")
                print("  1. DOCX files don't contain images")
                print("  2. Images are being filtered out")
                print("  3. Image extraction is not working")
                return False
                
        except Exception as e:
            print(f"‚ùå Content Library check failed - {str(e)}")
            return False
    
    def test_semantic_image_distribution_in_library(self):
        """Test for the specific user issue: images duplicated across all articles"""
        print(f"\nüîç TESTING FOR USER'S SPECIFIC ISSUE")
        print("Checking if images are duplicated across all articles from same document")
        
        try:
            # Get articles from Content Library
            response = requests.get(f"{self.base_url}/content-library", timeout=30)
            
            if response.status_code != 200:
                print(f"‚ùå Could not access Content Library")
                return False
            
            data = response.json()
            articles = data.get('articles', [])
            
            # Group articles by batch/session to find articles from same document
            article_batches = {}
            for article in articles:
                metadata = article.get('metadata', {})
                batch_id = (metadata.get('batch_id') or 
                           metadata.get('session_id') or 
                           metadata.get('source', 'unknown'))
                
                if batch_id not in article_batches:
                    article_batches[batch_id] = []
                article_batches[batch_id].append(article)
            
            print(f"üìä Found {len(article_batches)} article batches")
            
            # Find batches with multiple articles and images
            test_batches = []
            for batch_id, batch_articles in article_batches.items():
                if len(batch_articles) > 1:  # Multiple articles from same document
                    # Check if any articles have images
                    batch_has_images = False
                    for article in batch_articles:
                        content = article.get('content', '')
                        if '/api/static/uploads/' in content or '<img' in content:
                            batch_has_images = True
                            break
                    
                    if batch_has_images:
                        test_batches.append((batch_id, batch_articles))
            
            if not test_batches:
                print("‚ö†Ô∏è No suitable batches found for duplication testing")
                print("  (Need multiple articles from same document with images)")
                return True  # Not necessarily a failure
            
            print(f"üîç Testing {len(test_batches)} batches for image duplication")
            
            duplication_detected = False
            
            for batch_id, batch_articles in test_batches[:3]:  # Test first 3 batches
                print(f"\nüìä Testing batch: {batch_id}")
                print(f"  Articles in batch: {len(batch_articles)}")
                
                # Analyze image distribution in this batch
                batch_image_sets = []
                
                for i, article in enumerate(batch_articles):
                    title = article.get('title', f'Article {i+1}')
                    content = article.get('content', '')
                    
                    # Extract image URLs
                    import re
                    image_urls = set(re.findall(r'/api/static/uploads/[^"\'>\s]+', content))
                    
                    if image_urls:
                        batch_image_sets.append(image_urls)
                        print(f"    Article {i+1}: {len(image_urls)} images")
                    else:
                        print(f"    Article {i+1}: 0 images")
                
                # Check for duplication within this batch
                if len(batch_image_sets) > 1:
                    first_set = batch_image_sets[0]
                    identical_count = sum(1 for img_set in batch_image_sets if img_set == first_set)
                    
                    if identical_count == len(batch_image_sets):
                        print(f"    ‚ùå DUPLICATION DETECTED: All articles have identical images")
                        duplication_detected = True
                    else:
                        print(f"    ‚úÖ NO DUPLICATION: Articles have different image sets")
            
            if duplication_detected:
                print("\n‚ùå CRITICAL ISSUE CONFIRMED:")
                print("  ‚ùå Images are duplicated across all articles from same document")
                print("  ‚ùå This confirms the user's original complaint")
                print("  ‚ùå Semantic image placement is NOT working properly")
                return False
            else:
                print("\n‚úÖ NO DUPLICATION DETECTED:")
                print("  ‚úÖ Articles have different image subsets")
                print("  ‚úÖ Images appear to be distributed contextually")
                print("  ‚úÖ User's issue appears to be resolved")
                return True
                
        except Exception as e:
            print(f"‚ùå Duplication test failed - {str(e)}")
            return False
    
    def run_comprehensive_test(self):
        """Run comprehensive semantic image placement test"""
        print("üöÄ COMPREHENSIVE SEMANTIC IMAGE PLACEMENT TEST")
        print("=" * 80)
        
        # Test files
        test_files = [
            '/app/Google_Map_JavaScript_API_Tutorial.docx',
            '/app/source_document.docx',
            '/app/Master_Product_Management_Guide.docx'
        ]
        
        upload_results = []
        
        # Test 1: Upload DOCX files
        for docx_file in test_files:
            if os.path.exists(docx_file):
                print(f"\n{'='*60}")
                print(f"UPLOADING: {os.path.basename(docx_file)}")
                print(f"{'='*60}")
                
                success, job_id = self.test_content_upload_with_docx(docx_file)
                upload_results.append(success)
                
                if success:
                    print(f"‚úÖ Upload successful for {os.path.basename(docx_file)}")
                else:
                    print(f"‚ùå Upload failed for {os.path.basename(docx_file)}")
                
                # Wait between uploads
                time.sleep(5)
        
        # Test 2: Check Content Library
        print(f"\n{'='*60}")
        print("CHECKING CONTENT LIBRARY")
        print(f"{'='*60}")
        
        library_check = self.check_content_library_for_semantic_placement()
        
        # Test 3: Check for duplication (user's specific issue)
        print(f"\n{'='*60}")
        print("TESTING FOR IMAGE DUPLICATION")
        print(f"{'='*60}")
        
        duplication_check = self.test_semantic_image_distribution_in_library()
        
        # Final assessment
        print("\n" + "=" * 80)
        print("üéØ COMPREHENSIVE TEST RESULTS")
        print("=" * 80)
        
        successful_uploads = sum(upload_results)
        total_uploads = len(upload_results)
        
        print(f"üì§ File Uploads: {successful_uploads}/{total_uploads} successful")
        print(f"üìö Content Library Check: {'‚úÖ PASSED' if library_check else '‚ùå FAILED'}")
        print(f"üîç Duplication Test: {'‚úÖ NO DUPLICATION' if duplication_check else '‚ùå DUPLICATION DETECTED'}")
        
        # Overall assessment
        if duplication_check and (library_check or successful_uploads > 0):
            print("\nüéâ SEMANTIC IMAGE PLACEMENT SYSTEM: WORKING CORRECTLY")
            print("‚úÖ User's original issue has been resolved")
            print("‚úÖ Images are distributed based on semantic relevance")
            print("‚úÖ Each image appears exactly once in the most relevant article")
            return True
        else:
            print("\n‚ùå SEMANTIC IMAGE PLACEMENT SYSTEM: ISSUES DETECTED")
            if not duplication_check:
                print("‚ùå CRITICAL: Images are still being duplicated across articles")
                print("‚ùå User's original complaint is still valid")
            if not library_check and successful_uploads == 0:
                print("‚ùå No images found in processed content")
            return False

if __name__ == "__main__":
    tester = ContentUploadSemanticTest()
    success = tester.run_comprehensive_test()
    
    if success:
        print("\nüéØ SEMANTIC IMAGE PLACEMENT: FULLY OPERATIONAL")
    else:
        print("\n‚ùå SEMANTIC IMAGE PLACEMENT: NEEDS IMMEDIATE ATTENTION")